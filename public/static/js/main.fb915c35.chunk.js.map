{"version":3,"sources":["logo.png","components/StudentItem.js","components/VapeKey.js","components/Students.js","components/Student.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","StudentItem","_ref","_ref$student","student","student_number","vape_problem","name","location","message","react_default","a","createElement","className","classNames","text-danger","text-success","VapeKey","STUDENTS_QUERY","gql","_templateObject","Students","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","react_apollo_browser_umd","query","loading","error","data","console","log","students","map","Component","Student","client","ApolloClient","uri","App","BrowserRouter","src","logo","alt","style","width","display","margin","Route","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb915c35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3b2a2b5b.png\";","import React from \"react\";\nimport classNames from \"classnames\";\nimport { Link } from \"react-router-dom\";\n\nexport default function StudentItem({\n  student: { student_number, vape_problem, name, location, message }\n}) {\n  return (\n    <div className=\"card card-body mb-3\">\n    <div className=\"row\">\n      <div className=\"col-md-9\">\n        <h4>\n          Student:<span\n            className={classNames({\n              \"text-danger\": vape_problem,\n              \"text-success\": !vape_problem\n            })}\n          >\n            {student_number}\n            \n          </span>\n          \n        </h4>\n        <h5>\n        Frequency: {name}\n        <br></br>\n        Location: {location}\n        <br></br>\n        Message: {message}\n        <br></br>\n        </h5>\n      </div>\n     \n    \n    </div>\n  </div>\n   \n  );\n}\n","import React from \"react\";\n\nexport default function VapeKey() {\n  return (\n    <div className=\"my-3\">\n    <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> = Vaping is a problem at WHS\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> = Vaping is not a problem\n      </p>\n      \n    </div>\n  );\n}","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport StudentItem from \"./StudentItem\";\nimport VapeKey from './VapeKey';\n\nconst STUDENTS_QUERY = gql`\nquery StudentsQuery {\n  students {\n    student_number\n    vape_problem\n    name\n    location\n    message\n  }\n}\n`;\n\nexport class Students extends Component {\n  render() {\n    return (\n      <Fragment>\n    \n        <h2 className=\"display-6 my-3\">Survey Results</h2>\n        <VapeKey />\n        <Query query={STUDENTS_QUERY}>\n           {\n          ({ loading, error, data }) => {\n              if(loading) return <h4>Loading...</h4>\n              if(error) console.log(error);\n              \n \n              return <Fragment>\n              {\n                   data.students.map(student => (\n                   <StudentItem key={student.student_number}\n                    student={student}/>\n                   ))\n                }\n\n                \n              </Fragment>;\n                \n              \n             }\n           }\n        </Query>\n        </Fragment>\n    )\n  }\n}\n\nexport default Students","import React, { Component } from \"react\";\n// import gql from \"graphql-tag\";\n// import { Query } from \"react-apollo\";\n// import { Link } from \"react-router-dom\";\n// import classNames from \"classnames\";\n\n// const STUDENT_QUERY = gql`\n//   query StudentQuery($student_number: Int!) {\n//     student(student_number: $student_number) {\n//       student_number\n//       vape_problem\n//       name\n//       location\n//       message\n//     }\n//   }\n// `;\n\nexport class Student extends Component {\n  render() {\n    return (\n    <div>\n      <h1>Student</h1>\n    </div>\n    )\n  }\n}\n\nexport default Student;\n","import React, { Component } from 'react';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Students from './components/Students';\nimport Student from './components/Student';\nimport logo from './logo.png';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <Router>\n       <div className=\"container\">\n        <img\n          src={logo}\n          alt=\"WHS\"\n          style={{ width: 300, display: \"block\", margin: \"auto\" }}\n        />\n        <Route exact path=\"/\" component={Students} />\n        <Route exact path=\"/launch/:student_number\" component={Student} />\n      </div>\n      </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}